FORMAT: 1A
HOST: https://apitest.paysafecard.com/v1

# paysafecard SafetyPay integration

This documentation explains how to start accepting <a href="https://www.safetypay.com/en/">SafetyPay</a> payments. 

It is an add-on to the classic paysafecard integration:


**REST API**: 
<br><br>https://www.paysafecard.com/en/business/downloads/

**SOAP API**: 
<br><br>
https://www.paysafecard.com/en/business/downloads/
<br><br>
https://www.paysafecard.com/fileadmin/api/paysafecardsopg.html

## Where to start?
To initiate the process of accepting SafetyPay, the business partner must contact the account manager directly or at [*sales@paysafecard.com*]().
Once the business process is finished, the feature will be activated from paysafecard side. The feature will be activated per MID (Merchant ID).

There are also some technical integration changes necessary, which will be described in detail [here](#technical_changes).

## Introduction
There are alternative payment flows to integrate SafetyPay into your payment ecosystem. In the following section we will describe the general customer flow for each of the alternatives.
<a name="existing_MID"></a>

# Technical changes
<a name="technical_changes"></a>

1. The logo must be changed accordingly at the checkout page 

2. Transactions must stay open for 48 hours before you can consider them incomplete

3. (Optional) The payment must be created accordingly to the choice of the customer at the checkout page. The integrations supports the usage of choosing the Payment Method during the Payment request. See section [Initiating a SafetyPay Payment - REST](#restrictions_REST) or [Creating a SafetyPay Disposition - SOAP](#restrictions_SOPG)
    * [Initiating a SafetyPay Payment - REST](#restrictions_REST)
    * [Creating a SafetyPay Disposition - SOAP](#restrictions_SOPG)
    
4. (Optional) Integrating the payment notification payload in JSON 
    * The [JSON payment notification](#payment_notification) enables the business partner to distinguish which payment instrument subtype was used for the transaction.

# Payment Process  with intermediary paysafecard redirection

## SafetyPay payment option on the paysafecard Payment Panel

### [Customer Flow](#customer_flows)
1. The customer selects paysafecard/SafetyPay as the preferred payment method at the business partner checkout page
2. The businesss partner initiates the payment with the correct amount, currency and other necessary parameters
3. The customer is redirected to the paysafecard hosted payment panel
4. The customer sees paysafecard and SafetyPay payment option on the payment panel
5. The customer selects SafetyPay and is redirected to the SafetyPay payment page
6. The customer is presented with 2 options to complete their payment: Cash or Online
    * "online" - Flow:
    5. The customer completes the payment with one of the presented online Payment Methods
    6. paysafecard sends a notification to the notification URL once the payment is complete
    7. The business partner captures the payment
    8. The customer may return to the success_url/okURL provided during the payment request. This is optional.
    * "cash" - Flow: 
    5. The customer receives a SafetyPay operation ID and pays for it at a point of collection
    6. paysafecard sends a notification to the notification URL once the payment is complete
    7. The business partner captures the payment

## Cash payment - with paysafecard redirection
[Cash Payment process - REST](#cash_payment_REST_PP)<br>
[Cash Payment process - SOAP](#cash_payment_SOAP_PP)
![Payment Flow](https://www.paysafecard.com/fileadmin/api/images/Diagram_SafetyPay_CASH_PP.jpg)



## Online Payment - with paysafecard redirection
[Online Payment process - REST](#online_payment_REST_PP)<br>
[Online Payment process - SOAP](#cash_payment_SOAP_PP)
![Payment Flow](https://www.paysafecard.com/fileadmin/api/images/Diagram_SafetyPay_ONLINE_PP.jpg)

<a name="separate_MID"></a>
# Payment Process with immediate redirection to SafetyPay

##  SafetyPay payment option with immediate redirection to SafetyPay

### [Customer Flow](#customer_flows)
1. The customer selects SafetyPay as the preferred payment method at the business partner checkout page
2. The businesss partner initiates the payment with "payment_instrument" & "payment_instrument_subtype" parameters set. "payment_instrument" is mandatory when providing "payment_instrument_subtype"
3. The customer is redirected to the SafetyPay hosted payment page
4. The customer is presented with the selected option to complete their payment depening on the "payment_instrument_subtype" set during the request: Cash or Online
    * "online" - Flow:
    5. The customer completes the payment with one of the presented online Payment Methods
    6. paysafecard sends a notification to the notification URL once the payment is complete
    7. The business partner captures the payment
    8. The customer may return to the success_url/okURL provided during the payment request. This is optional.
    * "cash" - Flow: 
    5. The customer receives a SafetyPay operation ID and pays for it at a point of collection
    6. paysafecard sends a notification to the notification URL once the payment is complete
    7. The business partner captures the payment

## Cash payment with immediate redirection to SafetyPay
[Cash Payment process - REST](#cash_payment_REST_noPP)<br>
[Cash Payment process - SOAP](#cash_payment_SOAP_noPP)
![Payment Flow](https://www.paysafecard.com/fileadmin/api/images/Diagram_SafetyPay_CASH_noPP.jpg)




## Online Payment with immediate redirection to SafetyPay
[Cash Payment process - REST](#online_payment_REST_noPP)<br>
[Cash Payment process - SOAP](#online_payment_SOAP_noPP)
![Payment Flow](https://www.paysafecard.com/fileadmin/api/images/Diagram_SafetyPay_ONLINE_noPP.jpg)



# Customer Data Takeover
Using the `customer_data_takeover` parameters in the payment creation, the merchant can pre-fill some data to improve the customer flow. 
- Adding the `tax_id` and `tax_id_type` fields will pre-fill the CFP field for transactions in Brazil
- Adding the `account_registration_date`, `account_KYC_level` and `account_registration_country` is mandatory in order to be able to perform SafetyPay payouts!

Below, you can find an example with all fields for REST:

```
{
  "type": "PAYSAFECARD",
  "amount": 2000.00,
  "currency": "BRL",
  "redirect": {
    "success_url": "https://www.paysafecard.com/okURL",
    "failure_url": "https://www.paysafecard.com/nokURL"
  },
  "notification_url": "https://www.paysafecard.com/pnUrl",
  "customer": {
    "id": "customer_id2"
  },
  "shop_id":"test123",
    "restrictions": {
    "payment_instrument": "safetypay",
    "payment_instrument_subtype": "online",
    "bank_ids": ["8439","8382"]
  },
  "customer_takeover_data": {
    "email": "test@test.com",
    "tax_id": "0123059433817717",
    "tax_id_type": "BRA_CPF",
    "account_registration_date": "1997-05-15",
    "account_KYC_level":"FULL",
    "account_registration_country":"MX"
  }
}
```

More on the parameters you can find here: 
[Initiating a SafetyPay Payment - REST](#customer_data_takeover_REST)

[Initiating a SafetyPay Payment - SOPG](#customerTakeoverData_SOPG)
# SafetyPay Payouts integration
This documentation explains how to start creating SafetyPay Payouts. SafetyPay Payout allows the transfer of funds to bank account holders in Peru, Mexico and Brazil. The Payout is executed by the business partner at the 
demand of the customer.  This documentation is an add-on to the classic paysafecard integration:
**REST API**:

https://www.paysafecard.com/en/business/downloads/

**SOAP API**:

https://www.paysafecard.com/en/business/downloads/
https://www.paysafecard.com/fileadmin/api/paysafecardsopg.html
## Where to start with SafetyPay payouts?
To initiate the process of creating a SafetyPay payouts, the business partner must contact the account manager directly or at sales@paysafecard.com. Once the business process is finished, the feature will be activated from paysafecard side. The feature will be activated per MID (Merchant ID).There are also some technical integration changes necessary, which will be described in detail here.

## Payout Process
1. Customer creates a payout request on business partner’s checkout


2. Business partner validates and completes the request and forwards it to paysafecard

    The business partner provides the customer’s personal details as well as other information like payout amount and beneficiary account information to paysafecard during the payout call.

3. Paysafecard and SafetyPay performs validations and send the request to the Partner bank

    Paysafecard performs validation of the available balance of the business partner's account. SafetyPay executes an AML screening using an international AML blacklists. This means every transaction request will be screened and blocked if the beneficiary is present on the blacklist. If all validations are succesfull, the payout request is send to the partner bank

4. Partner bank validates the payee and executes a payout

    Partner bank compares the personal information provided by the business partner with the records owned by the bank.   If the information does not match, the payout transaction is rejected. 

5. paysafecard notifies the Merchant of the payout result

    Paysafecard notifies the merchant about the result of the payout operation via API.

## Exchange of customer data
Following are mandatory and optional attributes that merchant must capture and provide within the Payout request.
    
|Attribute|Mexico|Brazil|Peru|
|-|-|-|-|
|First Name|Mandatory|Mandatory|Mandatory|
|Middle Name|Optional|Optional|Optional|
|Last Names|Mandatory|Mandatory|Mandatory|
|Date of Birth|Mandatory|Mandatory|Mandatory|
|Document ID Type|Mandatory|Mandatory|Mandatory|
|Document IT Number|Mandatory|Mandatory|Mandatory|
|Bank Name|N/A|N/A|N/A|
|Bank Account Format|Mandatory|N/A|Mandatory|
|Bank Account Number|Mandatory|N/A|Mandatory|
|Disbursement Amount + Currency|Mandatory|Mandatory|Mandatory|
|Mobile|Optional|N/A|N/A|
|Email|Optional|Optional|Optional|
|Reference Code (generated by merchant)|Mandatory|Mandatory|Mandatory|
|Country|Mandatory|Mandatory|Mandatory|
|IP address|Optional|Optional|Optional|

## Getting the MID limits
- The business partner has one MID (for each currency, each MID has its own payout limit - the amount that still can
        be paid out by the merchant), information about the financial condition of a MID can be retrieved real-time via [getPayoutState](#retrieve_limits). Automatically all associated MID’s will be returned.
- As soon as a MID limit is reached, payout on this MID is not possible for this time-period.
    

## Settlement
- All payout transactions need to be paid by the business partner. The total monthly payout amount is automatically deducted (netted) from the monthly payment amount.
- The total amount of payout money may exceed the total amount of payment money up to a certain level.
- Detailed information on this level can be retrieved with the function [getPayoutState](#retrieve_limits).
        

## Reporting Criteria
Offers the possibility to classify sub-merchants. Agreement with paysafecard needed - not agreed values lead to a failed payment. 
<br>Reporting Criterias add an additional layer to an MID and allow for a logical separation of brands and merchants on our side. 

| Parameter        | Description                                                                                                                     | Format                          |
|------------------|---------------------------------------------------------------------------------------------------------------------------------|---------------------------------|
| `subId` | The Reporting Criteria (or submerchant Id) is used to classify sub-merchants. The setup of RCs must be agreed with paysafecard. | Up to 8 alphanumeric characters | 

*Please note: When integrating as a <b>Payment Service Provider</b> payments will be processed on behalf of merchants. In this case this <b>parameter is mandatory</b>. The parameter has to be included in all paysafecard Payment, Payout and Refund requests for <b>Payment Service Providers</b>.*


## Country specific requirements and limitations
<b>Supported countries and their currencies with minumim and maximum amounts</b>

|Country|Field Name|Min/Max|Amount|Currency|
|-------|-------|-------|-------|-------|
|MEX|payout_amount|Min|10.00|MXN|
|MEX|payout_amount|Max|18000.00|MXN|
|BRA|payout_amount|Min|5.00|BRL|
|BRA|payout_amount|Max|5500.00|BRL|
|PER|payout_amount|Min|5.00|PEN|
|PER|payout_amount|Max|4000.00|PEN|

> Please note that the maxiumum payout limit is the equivalent of 1000 USD but we have made adjustments for the volatility of the currencies. Partners should keep to the current equivalent of 1000 USD.

<b>Mexico</b>

1. Customer must accept SafetyPay’s T&C and Privacy Policies(provided by account manager).
2. Business partner must mention in its Terms & Conditions (T&C) that Payouts are executed by SafetyPay

## Payout implementation
- Prerequisites

    - SOPG Username and Password/API Key for request authentication provided by paysafecard. User will have functions for payment and refund available.
    - Authorization of the payment server IP address in the production environment (if a 403 error is received when trying to access the service, it is likely that the IP address is not yet allowed to access).
    - Content-type: Please make sure that the content type in the HTTP header, when submitting requests, is set to Content-Type: application/xml
    - Character encoding needs to be in UTF-8.
    - For all deposits passing the parameters `account_registration_date`, `account_KYC_level` and `account_registration_country` in `the customer_data_takeover`/customerDataTakeover object for this customer and initiating the payout with the same `id`/merchantClientId for them.^1^
    
> ^1^ Customers with a completed successful deposit will not need to make a new one before receiving a payout but any further deposits will need to contain the parameters.

# Group Initiating a SafetyPay Payment - REST

<a name="initiate_payment"></a>
## restrictions [/payments]
<a name="restrictions_REST"></a>
The array `restrictions` containing the `payment_instrument`, `payment_instrument_subtype` & `bank_ids` parameters gives the possibility to initiate a payment for the specific option chosen by the customer
at the merchant's checkout. When choosing the `payment_instrument`, the customer will be redirected to the SafetyPay payment page immediately.

| Parameter                     | Type                       | Description      | Possible values
| ---                           | ---                        | ---              | ---                  
| `restrictions`                | Array                      | The payment restrictions array.
| `payment_instrument`          | String                     | The payment instrument gives the possibility to initiate the payment for the specific option chosen at the merchant's checkout page. "payment_instrument" is mandatory when providing "payment_instrument_subtype" |`paysafecard`, `safetypay`
| `payment_instrument_subtype`  | String                     | The payment instrument subtype gives the possibility to initiate the payment for the specific option chosen at the merchant's checkout page. |`cash`,`online`
| `bank_ids`                    | Numerical Array            | The bank ID restriction gives the possibility to only show certain bank options. It is an array that allows multiple options. Only 74 characters can be sent (14 bank IDs). Providing "bank_id" without providing the "payment_instrument" will show all the available payment methods.  | A list of bank IDs can be found at the bottom under ["Bank IDs"](#bank_ids)

## customer_data_takeover
<a name="customer_data_takeover_REST"></a>
The array `customer_data_takeover` containing the `tax_id`, `tax_id_type`, `account_registration_date`, `account_KYC_level` & `account_registration_country` parameters gives the possibility to specify parameters that ease the customer journey such as tax ID and its type (for Brazilian customers) as well as ones mandatory for Payouts such as the account details ones.

| Parameter                     | Type                       | Description      | Possible values
| ---                           | ---                        | ---              | ---                  
| `customer_data_takeover`                | Array                      | The customer data takeover array.
| `tax_id`  | String                     | The tax ID of the customer. Required if you want to prefill the CFP field for transactions in Brazil. |0123059433817717
| `tax_id_type`                    | String            | The type of the tax ID.  | BRA_CPF
| `account_registration_date`                    | String            | The registration date of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer  | 2018-05-03
| `account_KYC_level`                    | String            | The KYC level of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer  | FULL, SIMPLE
| `account_registration_country`                    | String            | The country of registration of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer | MX,PE

### Initiate Payment Example

```
{
  "type": "PAYSAFECARD",
  "amount": 2000.00,
  "currency": "BRL",
  "redirect": {
    "success_url": "https://www.paysafecard.com/okURL",
    "failure_url": "https://www.paysafecard.com/nokURL"
  },
  "notification_url": "https://www.paysafecard.com/pnUrl",
  "customer": {
    "id": "customer_id2"
  },
  "shop_id":"test123",
  "customer_takeover_data": {
    "email": "test@test.com",
    "account_registration_date": "1997-05-15",
    "account_KYC_level":"FULL",
    "account_registration_country":"MX"
  },
    "restrictions": {
    "payment_instrument": "safetypay",
    "payment_instrument_subtype": "online",
    "bank_ids": ["8439","8382"]
  }
}

```

### New Error Code
Error number "2039" indicates that the one of the values passed in `payment_instrument` <!--or `payment_instrument_subtype`,--> is not a valid value.


```
{
    "code": "invalid_restriction",
    "message": "Could not convert restriction value 'giftcard_test'!",
    "number": 2039
}
```

## retrieve payment details
When using the GET request `retrieve payment details`, you can also receive information which bank was used. If you want to use this feature, please contact us.
```
{
    "object": "PAYMENT",
    "id": "pay_1100000000_KLeati7txeyNIsw9vf1erkzKMjmlltoH_USD",
    "created": 1652888898010,
    "updated": 1652888980033,
    "currency": "USD",
    "status": "SUCCESS",
    "type": "PAYSAFECARD",
    "redirect": {
        "success_url": "https://www.paysafecard.com/success/pay_1100000000_KLeati7txeyNIsw9vf1erkzKMjmlltoH_USD",
        "failure_url": "https://www.paysafecard.com/failure/pay_1100000000_KLeati7txeyNIsw9vf1erkzKMjmlltoH_USD",
        "auth_url": "https://customer.test.at.paysafecard.com/psccustomer/GetCustomerPanelServlet?mid=1100000000&mtid=pay_1100000000_KLeati7txeyNIsw9vf1erkzKMjmlltoH_USD&amount=1.00&currency=USD"
    },
    "customer": {
        "id": "MCID_limit_test",
        "ip": "***.***.***.***"
    },
    "amount": 1.00,
    "notification_url": "https://www.paysafecard.com/pnUrl",
    "submerchant_id": "1",
    "card_details": [
        {
            "serial": "1421456550",
            "currency": "USD",
            "amount": 1.00,
            "type": "00109",
            "country": "BR"
        }
    ],
    "payment_instrument": "safetypay",
    "payment_instrument_subtype": "online",
    "bank_id": "9999"
}
```

<a name="initiate_payment"></a>
### initiate payment request [POST]

+ Request (application/json)

        Authorization: Basic cHNjX25wZ0g2THkxa3NXMS1CZzBQaURDNGZ0dzliSWtzQkY=

+ Attributes (PaymentRequest)

+ Response 201 (application/json)

            {
            "object": "PAYMENT",
            "id": "pay_1100000000_v2Pa0tDn0tr1CppVkSQ0yjY77eVOO5Pl_USD",
            "created": 1607074107062,
            "updated": 1607074107062,
            "currency": "USD",
            "status": "INITIATED",
            "type": "PAYSAFECARD",
            "redirect": {
            "success_url": "https://ok.com/pay_1100000000_v2Pa0tDn0tr1CppVkSQ0yjY77eVOO5Pl_USD",
            "failure_url": "https://nok.com/pay_1100000000_v2Pa0tDn0tr1CppVkSQ0yjY77eVOO5Pl_USD",
            "auth_url": "https://customer.test.at.paysafecard.com/psccustomer/GetCustomerPanelServlet?mid=1100000000&mtid=pay_1100000000_v2Pa0tDn0tr1CppVkSQ0yjY77eVOO5Pl_USD&amount=1.00&currency=USD"
            },
            "customer": {
            "id": "test_dev"
            }, "customer_takeover_data": {
            "email": "test@test.com",
            "account_registration_date": "1997-05-15",
            "account_KYC_level":"FULL",
            "account_registration_country":"MX"
            }, "restrictions": {
                    "payment_instrument":"safetypay",
                    "payment_instrument_subtype":"cash"
            }
            "amount": 1.00,
            "notification_url": "https://9fc7622ff6a8995a8919be9c134d39a5.m.pipedream.net"
            }






# Group Creating a SafetyPay Disposition - SOAP

## restrictions
<a name="restrictions_SOPG"></a>

The disposition restriction `INSTRUMENT` & `INSTRUMENT_SUBTYPE` gives the possibility to create a disposition for the specific option chosen by the customer at the merchant's checkout. The customer will be redirected to the SafetyPay payment page immediately.

| Parameter                     | Type                       | Description      | Possible values
| ---                           | ---                        | ---              | ---                  
| `dispositionRestrictions`     | Array                      | The payment restrictions array.
| `key`     | String                      | Value to specify what type of restriction should be applied for the transaction.| `INSTRUMENT`,`INSTRUMENT_SUBTYPE`,`BANK_IDS`
| `value`                  | String                     | Value to define the available options for a certain restriction. | `INSTRUMENT`:`paysafecard`, `safetypay`<br>`INSTRUMENT_SUBTYPE`:`cash`,`online`<br>`BANK_IDS`: A list of bank IDs can be found at the bottom under ["Bank IDs"](#bank_ids)

## customerTakeoverData
<a name="customerTakeoverData_SOPG"></a>
The array `customerTakeoverData` containing the `registrationDate`, `kycLevel` & `countryIso2` parameters gives the possibility to specify parameters that ease the customer journey such as email to skip the intermediary page for SafetyPay as well as ones mandatory for Payouts such the account details ones.

| Parameter                     | Type                       | Description      | Possible values
| ---                           | ---                        | ---              | ---                  
| `customerTakeoverData`                | Array                      | The payment restrictions array.
| `registrationDate`                    | String            | The registration date of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer  | 2018-05-03
| `kycLevel`                    | String            | The KYC level of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer  | FULL, SIMPLE
| `countryIso2`                    | String            | The country of registration of the customer with the partner. Mandatory to be included in a deposit to do payouts to this customer  | MX,PE
| `hash`                    | String            | The hash key used for the details to be securely transferred | 123%asd


<a name="createDisposition"></a>
##createDisposition Example
```

<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:pscservice">
   <soapenv:Header/>
   <soapenv:Body>
      <urn:createDisposition>
         <urn:username>username_SOAP</urn:username>
         <urn:password>password_SOAP</urn:password>
         <urn:mtid>mtid_soap</urn:mtid>

         <urn:amount>10.00</urn:amount>
         <urn:currency>USD</urn:currency>
         <urn:merchantclientid>customer1</urn:merchantclientid>

         <urn:okUrl>https://www.paysafecard.com/okURL</urn:okUrl>
         <urn:nokUrl>https://www.paysafecard.com/nokURL</urn:nokUrl>
         <urn:pnUrl>https://www.paysafecard.com/pnURL</urn:pnUrl>

         <urn:customerDetail>customer_id</urn:customerDetail>
         <urn:subId>reporting_criteria</urn:subId>
         
         <urn:customerTakeoverData>
         <urn:registrationDate>1997-04-10</urn:registrationDate>
         <urn:countryIso2>MX</urn:countryIso2>
         <urn:kycLevel>FULL</urn:kycLevel>
         <urn:hash>123</urn:hash>
         </urn:customerTakeoverData>
         
        <urn:dispositionRestrictions>
        <urn:key>INSTRUMENT</urn:key>
        <urn:value>safetypay</urn:value>
        <urn:key>INSTRUMENT_SUBTYPE</urn:key>
        <urn:value>cash</urn:value>
        <urn:key>BANK_IDS</urn:key>
        <urn:value>"8382,4087"</urn:value>        
        </urn:dispositionRestrictions>

      </urn:createDisposition>
   </soapenv:Body>
</soapenv:Envelope>

```

### New Error Code

Error code "2039" indicates that the value passed in `instrument` is not a valid value.

```   
<ns1:createDispositionResponse>
    <ns1:createDispositionReturn>
        <ns1:mtid>1607092862</ns1:mtid>
        <ns1:resultCode>1</ns1:resultCode>
        <ns1:errorCode>2039</ns1:errorCode>
    </ns1:createDispositionReturn>
</ns1:createDispositionResponse>
```

## getSerialNumbers Example
When using the request `getSerialNumbers`, you can also receive information which bank was used. If you want to use this feature, please contact us.


```
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns1="urn:pscservice">
    <soap:Body>
        <ns1:getSerialNumbersResponse>
            <ns1:getSerialNumbersReturn>
                <ns1:mtid>pay_1000067571_T23Gn1TLmSQ3Aj3im7kwFvAPrUgkCxmJ_BRL</ns1:mtid>
                <ns1:resultCode>0</ns1:resultCode>
                <ns1:errorCode>0</ns1:errorCode>
                <ns1:amount>2000.0</ns1:amount>
                <ns1:currency>BRL</ns1:currency>
                <ns1:dispositionState>S</ns1:dispositionState>
                <ns1:serialNumbers>1421456559;2000.00</ns1:serialNumbers>
                <ns1:paymentInstrument>safetypay</ns1:paymentInstrument>
                <ns1:paymentInstrumentSubtype>online</ns1:paymentInstrumentSubtype>
                <ns1:bankId>9999</ns1:bankId>
            </ns1:getSerialNumbersReturn>
        </ns1:getSerialNumbersResponse>
    </soap:Body>
</soap:Envelope>
```


# Group JSON Payment notification
<a name="payment_notification"></a>
The payment notification is used to notify the business partner independently of the customer’s behaviour after the payment authorization.

This service ensures that payments can be completed before the top-up of the customer’s account and is, therefore, highly recommended in order to avoid incomplete payments.
In case of technical errors (e.g. socket timeout), or application errors (e.g. HTTP 500 response), the payment notification is resubmitted at a regular interval until one of the following criteria is fulfilled:
- The payment notification is successfully delivered (i.e. HTTP 200 response from payment server).
- The maximum number of retry attempts has been reached (currently configured at 5 retries).

A JSON version of the payment notification with all the possible parameters, including the "*payment_instrument*" used, is now available. Example of the body:

```
{
  "timestamp": 1607017210793,
  "eventType": "ASSIGN_CARDS",
  "version": "1",
  "data": {
    "mid": "1100000000",
    "customer": {
        "id": "kfoLkCq3RBIJiJF6sJWBeYA4tnfsCms2"
        },
    "payment_id": "pay_1100000000_XdyBD9FuEJVhpX3hctwJzCB8W1rEzqTo_USD",
    "payment_instrument": "safetypay",
    "payment_instrument_subtype":"cash",
    "card_details": [
      {
        "serial": "1420271325",
        "currency": "USD",
        "amount": 10,
        "type": "00094",
        "country": "XX"
      }
    ]
  }
}
```

**JSON payment notification response objects**

| Parameter                     | Type                       | Description                          
| ---                           | ---                        | ---                                  
| `timestamp`                   | Unix timestamp (in ms)     | The time of the card assign event. 
| `eventType`                   | String                     | The event type that triggered the payment notification. 
| `version`                     | String                     | API version number. 
| `data`                        | Array                      | Contains the data of the transaction. 
| `mid`                         | String                     | The 10-digit Merchant ID.
| `customer`                    | Array                      | Contains the customer data.
| `id`                          | String                     | The unique customer identifier provided by the business partner. 
| `payment_id`                  | String                     | The sub-merchant id. Also knows as reporting criteria. 
| `payment_instrument`          | String                     | The payment method used. <br><br> Possible values: paysafecard or safetypay
| `payment_instrument_subtype`  | String                     | The type of payment option. <br><br> Possible values: cash, online
| `bank_id`                     | String                     | The type bank used for SafetyPay <br><br> Possible values: See [*here*](https://www.paysafecard.com/fileadmin/api/paysafecardsafetypay.html#/reference/bank-ids) <br>*Contact paysafecard if you want this paramater*
| `card_details`                | Array                      | Contains the details of the card used for the transaction (up to 10 iterations - max. number of cards that can be used in a single transaction) with the card information.
| `serial`                      | String                     | The serial number that identifies the card.
| `currency`                    | String                     | The currency code of the card in ISO 4217 3-digit format.
| `amount`                      | float                      | The amount used from the card (with 2 decimal numbers).
| `type`                        | String                     | The 5 characters code that identifies the card type.
| `country`                     | Array                      | The country code of the card in ISO 3166-1 2-digit format.


# Group Payment processes
<a name="cash_payment_REST_PP"></a>
## Cash Payment process - REST - intermediary paysafecard redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard and/or SafetyPay

1. [Initiate Payment](#initiate_payment): Send POST request `initiate Payment` 
    * 2.1. If the response gives back http20x, the business partner redirects the customer to the payment panel
    * 2.2. If the response gives back http40x or htp50x, show an error message to the customer
        * Inititate Payment error message: "*Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (businessparter)support.*"

1. Redirection to the payment panel `auth_url`: The customer reaches the paysafecard payment panel
    * 3.1. The customer selects SafetyPay Cash Payment
    * 3.2. The customer is redirected to the SafetyPay hosted payment page
    
1. The customer receives a operation ID code
    * 4.1. The customer has to go to a Point of Collection and complete their payment
    
1. Payment notification delivery: A card will be assigned once the customer completes the payment (transaction status "AUTHORIZED"), paysafecard sends a notification to the `notification_url`

1. `notification_url` handling: Right after the payment notification delivery, the business partner performs the GET request `Retrieve payment details` to check the status of the transaction
    * 6.1. If the GET request `retrieve payment details` returns the status "AUTHORIZED", immediately perform the POST request `capture Payment` 
        * 6.2. If the response to `capture payment` is http20X and the status returned is "SUCCESS", the business partner makes a user account top up accordingly or deliver the goods

<a name="online_payment_REST_PP"></a>
## Online Payment process - REST - intermediary paysafecard redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard and/or SafetyPay

1. [Initiate Payment](#initiate_payment): Send POST request `initiate Payment` 
    * 2.1. If the response gives back http20x, the business partner redirects the customer to the payment panel
    * 2.2. If the response gives back http40x or htp50x, show an error message to the customer
        * Inititate Payment error message: "*Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (businessparter)support.*"

1. Redirection to the payment panel `auth_url`: The customer reaches the paysafecard payment panel
    * 3.1. The customer selects SafetyPay Online Payment
    * 3.2. The customer is redirected to the SafetyPay hosted payment page
    
1. The customer continues with their preferred choice of online payment methods and completes the payment
    
1. Payment notification delivery: A card will be assigned once the customer completes the payment (transaction status "AUTHORIZED"), paysafecard sends a notification to the `notification_url`

1. `notification_url` handling: Right after the payment notification delivery, the business partner performs the GET request `Retrieve payment details` to check the status of the transaction
    * 6.1. If the GET request `retrieve payment details` returns the status "AUTHORIZED", immediately perform the POST request `capture Payment` 
        * 6.2. If the response to `capture payment` is http20X and the status returned is "SUCCESS", the business partner makes a user account top up accordingly or deliver the goods

1. `success_url` handling: The customer may return to the `success_url`. This step is optional. 


<a name="cash_payment_REST_noPP"></a>
## Cash Payment process - REST - immediate SafetyPay redirection
1. The customer selects SafetyPay at the business partner checkout page

1. [Initiate Payment](#initiate_payment): Send POST request `initiate Payment` with "payment_instrument" & "payment_instrument_subtype" parameters set to "safetypay" & "cash": [Initiating a SafetyPay Payment - REST](#restrictions_REST)
    * 2.1. If the response gives back http20x, the business partner redirects the customer to the payment panel
    * 2.2. If the response gives back http40x or htp50x, show an error message to the customer
        * Inititate Payment error message: "*Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (businessparter)support.*"

1. Redirection to the `auth_url`: The customer reaches the SafetyPay Cash Payment Page
    
1. The customer receives a operation ID code
    * 4.1. The customer has to go to a Point of Collection and complete their payment
    
1. Payment notification delivery: A card will be assigned once the customer completes the payment (transaction status "AUTHORIZED"), paysafecard sends a notification to the `notification_url`

1. `notification_url` handling: Right after the payment notification delivery, the business partner performs the GET request `Retrieve payment details` to check the status of the transaction
    * 6.1. If the GET request `retrieve payment details` returns the status "AUTHORIZED", immediately perform the POST request `capture Payment` 
        * 6.2. If the response to `capture payment` is http20X and the status returned is "SUCCESS", the business partner makes a user account top up accordingly or deliver the goods

<a name="online_payment_REST_noPP"></a>
## Online Payment process - REST - immediate SafetyPay redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard and/or SafetyPay

1. [Initiate Payment](#initiate_payment): Send POST request `initiate Payment` with "payment_instrument" & "payment_instrument_subtype" parameters set:[Initiating a SafetyPay Payment - REST](#restrictions_REST)
    * 2.1. If the response gives back http20x, the business partner redirects the customer to the payment panel
    * 2.2. If the response gives back http40x or htp50x, show an error message to the customer
        * Inititate Payment error message: "*Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (businessparter)support.*"

1. Redirection to the `auth_url`: The customer reaches the SafetyPay Online Payment Page
    
1. The customer continues with their preferred choice of online payment methods and completes the payment
    
1. Payment notification delivery: A card will be assigned once the customer completes the payment (transaction status "AUTHORIZED"), paysafecard sends a notification to the `notification_url`

1. `notification_url` handling: Right after the payment notification delivery, the business partner performs the GET request `Retrieve payment details` to check the status of the transaction
    * 6.1. If the GET request `retrieve payment details` returns the status "AUTHORIZED", immediately perform the POST request `capture Payment` 
        * 6.2. If the response to `capture payment` is http20X and the status returned is "SUCCESS", the business partner makes a user account top up accordingly or deliver the goods

1. `success_url` handling: The customer may return to the `success_url`. This step is optional. 

<a name="cash_payment_SOAP_PP"></a>
## Cash Payment process - SOAP - intermediary paysafecard redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard or SafetyPay

1. [create Disposition](#createDisposition): the business partner makes the SOAP request `createDisposition` 
    * 2.1. If the result and error code is `0`, the business partner redirects the customer to the payment panel
    * 2.2. If the result or error code is not `0`, the business partners shows an error message to the customer:

        *"Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (business partner) support."*

1. Redirection to the payment panel with `getCustomerPanel`: The customer reaches the paysafecard payment panel
    * 3.1. The customer selects SafetyPay Cash Payment
    * 3.2. The customer is redirected to the SafetyPay hosted payment page
    
1. The customer receives a operation ID code
    * 4.1. The customer has to go to a Point of Collection to complete the payment
  
1. Payment notification delivery: Since the card is assigned to the transaction (transaction status "S"), paysafecard sends a notification to the `pn_url`

1. `pnUrl` handling: Right after the payment notification delivery, the business partner performs the request `getSerialNumbers` to check the status of the transaction
    * 6.1. If `getSerialNumbers`returns the status "S", immediately perform the `executeDebit` request
        * 6.2. If the response to `executeDebit` is result and error code is `0`, the business partner makes a user account top up accordingly or deliver the goods

<a name="online_payment_SOAP_PP"></a>
## Online Payment process - SOAP - intermediary paysafecard redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard or SafetyPay

1. [create Disposition](#createDisposition): the business partner makes the SOAP request `createDisposition` 
    * 2.1. If the result and error code is `0`, the business partner redirects the customer to the payment panel
    * 2.2. If the result or error code is not `0`, the business partners shows an error message to the customer:

        *"Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (business partner) support."*

1. Redirection to the payment panel with `getCustomerPanel`: The customer reaches the paysafecard payment panel
    * 3.1. The customer selects SafetyPay Online Payment
    * 3.2. The customer is redirected to the SafetyPay hosted payment page
    
1. The customer continues with their preferred choice of online payment methods and completes the payment

1. Payment notification delivery: Since the card is assigned to the transaction (transaction status "S"), paysafecard sends a notification to the `pn_url`

1. `pnUrl` handling: Right after the payment notification delivery, the business partner performs the request `getSerialNumbers` to check the status of the transaction
    * 6.1. If `getSerialNumbers`returns the status "S", immediately perform the `executeDebit` request
        * 6.2. If the response to `executeDebit` is result and error code is `0`, the business partner makes a user account top up accordingly or deliver the goods

1. `okUrl` handling: The customer may return to the `okUrl`. This step is optional. 


<a name="cash_payment_SOAP_noPP"></a>
## Cash Payment process - SOAP - immediate SafetyPay redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard or SafetyPay

1. [create Disposition](#createDisposition): the business partner makes the SOAP request `createDisposition` 
    * 2.1. If the result and error code is `0`, the business partner redirects the customer to the payment panel
    * 2.2. If the result or error code is not `0`, the business partners shows an error message to the customer:

        *"Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (business partner) support."*

1. Redirection to the payment panel with `getCustomerPanel`: The customer reaches the SafetyPay Cash Payment Page
    
1. The customer receives a operation ID code
    * 4.1. The customer has to go to a Point of Collection or pay for the operation ID code with one of the available payment options
  
1. Payment notification delivery: Since the card is assigned to the transaction (transaction status "S"), paysafecard sends a notification to the `pn_url`

1. `pnUrl` handling: Right after the payment notification delivery, the business partner performs the request `getSerialNumbers` to check the status of the transaction
    * 6.1. If `getSerialNumbers`returns the status "S", immediately perform the `executeDebit` request
        * 6.2. If the response to `executeDebit` is result and error code is `0`, the business partner makes a user account top up accordingly or deliver the goods

<a name="online_payment_SOAP_noPP"></a>
## Online Payment process - SOAP - immediate SafetyPay redirection
1. The customer selects the payment method at the business partner checkout page: paysafecard or SafetyPay

1. [create Disposition](#createDisposition): the business partner makes the SOAP request `createDisposition` 
    * 2.1. If the result and error code is `0`, the business partner redirects the customer to the payment panel
    * 2.2. If the result or error code is not `0`, the business partners shows an error message to the customer:

        *"Transaction could not be intitiated due to connection problems. If the problem persists, please contact our (business partner) support."*

1. Redirection to the payment panel with `getCustomerPanel`: : The customer reaches the SafetyPay Online Payment Page
    
1. The customer continues with their preferred choice of online payment methods and completes the payment

1. Payment notification delivery: Since the card is assigned to the transaction (transaction status "S"), paysafecard sends a notification to the `pn_url`

1. `pnUrl` handling: Right after the payment notification delivery, the business partner performs the request `getSerialNumbers` to check the status of the transaction
    * 6.1. If `getSerialNumbers`returns the status "S", immediately perform the `executeDebit` request
        * 6.2. If the response to `executeDebit` is result and error code is `0`, the business partner makes a user account top up accordingly or deliver the goods

1. `okUrl` handling: The customer may return to the `okUrl`. This step is optional. 

<!--!
<a name="customer_flows"></a>

# Group Customer Flows
## Brazil
<!--![BRL_Flow](https://www.paysafecard.com/fileadmin/api/images/BRL_flow.png)
![BRL_Flow](https://pr-www-euc1.eu.paysafecorp.com/fileadmin/api/images/BRL_flow.png)

## Colombia
<!--![COP_Flow](https://www.paysafecard.com/fileadmin/api/images/COP_flow.png)
![COP_Flow](https://pr-www-euc1.eu.paysafecorp.com/fileadmin/api/images/COP_flow.png)

## Chile
<!--![CLP_Flow](https://www.paysafecard.com/fileadmin/api/images/CLP_flow.png) 
![CLP_Flow](https://pr-www-euc1.eu.paysafecorp.com/fileadmin/api/images/CLP_flow.png)

## Mexico
<!--![MXN_Flow](https://www.paysafecard.com/fileadmin/api/images/MXN_flow.png) 
![MXN_Flow](https://pr-www-euc1.eu.paysafecorp.com/fileadmin/api/images/MXN_flow.png)
-->

<a name="bank_ids"></a>


# Group Payout API Calls
Payout API allows you to:
- validate a payout
- capture a payout in two ways
- retrieve payouts by id
- retrieve payout limits by currency

## SOPG

### Description of Parameters
+ username – business partner account username 
  * provided by paysafecard for the authentication.
+ password – business partner account password  
  * provided by paysafecard for the authentication 
+ ptid – transaction id, unique identifier for each disposition.  
  * must be unique, also if the transaction failed
  * must be different from mtid used during payment
  * max. length: 90 characters  
  * recommended value: up to 20 characters  
  * provided by business partner  
  * only the following is allowed: A-Z, a-z, 0-9 as well as – (hyphen) and _ (underline)   
  * example: 3516-6s4dfsad41 
+ subId – Mandatory parameter for PSP’s (payment service providers), to distinguish multiple websites
  * value must be left empty if nothing else is agreed.  
  * so-called ‘reporting criteria’, offers the possibility to classify transactions  
  * max. length: 8 characters (case sensitive)  
  * agreement with paysafecard needed  
  * example: shop1 
+ amount – payout amount  
  * requested amount is not allowed to exceed 2500.00 EUR (or equivalent in a different transaction currency) in value  
  * max. 11 digits before – exactly 2 digits after the decimal point  
  * use a point as a decimal separator  
  * Valid example: 
    * 100.00
    * 1000.00
  * Invalid example: 
    * 1,000.00 
+ currency – disposition currency   
  * max. length: 3 characters, all uppercase  
  * ISO Currency Code   
  * example: MXN
+ merchantClientId - unique customer identified provided by the merchant. Must line up with the merchantClientId used during a previous deposit.
  * max. length: 200 characters
+ clientIp (OPTIONAL) - IP address of the customer
+ countryCode - ISO 3166-1 alpha-2 country code 
  * example: MX, PE, BR
+ payoutInstrument - always "SAFETYPAY"
+ validationOnly – Validate the payout without transferring the funds 
  * value true: Test payout request for validity
  * value false: Execute payout
+ utcOffset – the difference in hours and minutes from Coordinated Universal Time (UTC)
  * Example: -03:00
+ notificationUrl (OPTIONAL) - An url, where paysafecard will send a notification request after the payout has been finalized (either successfully or unsuccessfully)

+ firstName (subelement of CustomerDetailsBasic): the first name of the customer
  * max. length: 60 characters
  * example: John
+ middleName (OPTIONAL) (subelement of CustomerDetailsBasic): the middle name of the customer
  * max. length: 60 characters
  * example: William
+ lastName (subelement of CustomerDetailsBasic): the last name of the customer customer
  * max. length: 60 characters
  * example: Doe
+ dateOfBirth (sub-element of CustomerDetailsBasic): the date of birth of the payout customer in YYYY-MM-DD format
  * example: 1979-12-20
+ phoneNumber (OPTIONAL) (sub-element of CustomerDetailsBasic): the phone number of the payout customer
  * max. length: 20 characters
+ email (OPTIONAL) (sub-element of CustomerDetailsBasic): valid email adress of the payout customer
  * max. length 255 characters
  * example: john.wdoe@gmail.com
+ registrationDate (sub-element of CustomerDetailsBasic): customer's merchant account creation date
  * example: 2021-12-31
+ country (sub-element of CustomerDetailsBasic): customer's country
+ kycLevel (sub-element of CustomerDetailsBasic): KYC status of the account with the merchant (SIMPLE/FULL)
  * SIMPLE = account is not verified
  * FULL = account is verified

+ bankAccount - contains sub-elements:
    * type - Type of the customer's bank account (example: CLABE) See section "Code books" for more information.
    * number - Bank account number (max length: 50 characters)
+ idDocument - contains sub-elements:
    * type - Type of customer's ID document (example: RFC). See section "Code books" for more information.
    * number - Customer's ID document number (max length: 50 characters)
+ resultCode – type of error
  * 0 indicates that no error occurred
  * 1 indicates that there is a problem with the submitted data (e.g., wrong credentials, transaction has expired, etc.)
  * 2 (technical problem) means that the service is temporarily not available
+ errorCode – the error that occurred - “complete list of error codes” at the bottom of this document
  * 0 indicates that no error occurred
  * Any other value indicates an error occurred
+ errorCodeDescription – provides a detailed description of the errorcode NULL in case of no error
  * In case of an error a string value will be returned

#### getPayoutState Parameters
 + MID – merchant ID, unique ID of the merchant/currency pair 10 digits long
 + totalpayoutAmount – The total amount of payouts that were executed on this MID within the current billing cycle
  * Double value Example: 50000,00
 + totalPaymentAmount – The total amount of payments that were executed on this MID within the current billing cycle in the currency of the MID
  * Double value Example : 300000,00
 + creditLine – An extra payout credit line provided by paysafecard to support payout in case an MID is out of balance in the currency of the MID
  * Double value Example 5000,00
 + totalpayoutBalance – The total amount that can still be paid out this billing cycle (in MID currency) Double value
  * 10000,00
 + dailypayoutLimit – the maximum amount of money that can be paid out on this MID for the current day (24 hour), in the currency of the MID (only if configured by paysafecard)
  * Double value if configured Example : 0,00
 + dailypayoutAmount – the total amount that has been paid out on this MID today (in MID currency) MID Double value
  * Example : 5000,00
 + dailypayoutBalance – the total amount that still can be paid out on this MID today (in MID currency) MID Double value if the dailypayoutlimit is configured
  * Example : 0,00

### Validating a payout
Upon successful execution of this request, the status of the SafetyPay is set to VALIDATION_SUCCESSFUL
+ Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:merchantClientId>unique-mcid-1</urn:merchantClientId>
    <urn:clientIp>123.45.67.89</urn:clientIp>
    <urn:validationOnly>true</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
        <urn:registrationDate>2021-12-12</urn:registrationDate>
        <urn:country>PT</urn:country>
        <urn:kycLevel>SIMPLE</urn:kycLevel>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>true</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

### Capturing a pre validated payout 
Upon successful execution of this request, the status of the SafetyPay Payout transitions to PENDING.

 + Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:merchantClientId>unique-mcid-1</urn:merchantClientId>
    <urn:clientIp>123.45.67.89</urn:clientIp>
    <urn:validationOnly>false</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
        <urn:registrationDate>2021-12-12</urn:registrationDate>
        <urn:country>PT</urn:country>
        <urn:kycLevel>SIMPLE</urn:kycLevel>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>false</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

### Capturing a payout without validation 
+ Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:merchantClientId>unique-mcid-1</urn:merchantClientId>
    <urn:clientIp>123.45.67.89</urn:clientIp>
    <urn:validationOnly>false</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
        <urn:registrationDate>2021-12-12</urn:registrationDate>
        <urn:country>PT</urn:country>
        <urn:kycLevel>SIMPLE</urn:kycLevel>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>false</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

<a name="retrieve_limits"></a>
### Retrieve limits 
Used to retrieve limits information for a specific `currency`. All associated MID’s limits infromation will be returned.

#### getPayoutState
+ Request:

 ```
<urn:getPayoutState>
     <urn:username>USER</urn:username>
     <urn:password>PASSWORD</urn:password>
</urn:getPayoutState>
```

 + Response: 
```
<ns1:getPayoutStateResponse>
    <ns1:getPayoutStateReturn>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
        <ns1:payoutState>
            <ns1:mid>9000000008</ns1:mid>
            <ns1:currency>PYG</ns1:currency>
            <ns1:totalPayoutAmount>0.0</ns1:totalPayoutAmount>
            <ns1:totalPaymentAmount>0.0</ns1:totalPaymentAmount>
            <ns1:creditLine>10000.0</ns1:creditLine>
            <ns1:totalPayoutBalance>10000.0</ns1:totalPayoutBalance>
            <ns1:dailyPayoutLimit>10000.0</ns1:dailyPayoutLimit>
            <ns1:dailyPayoutAmount>0.0</ns1:dailyPayoutAmount>
            <ns1:dailyPayoutBalance>10000.0</ns1:dailyPayoutBalance>
        </ns1:payoutState>
        <ns1:payoutState>
            <ns1:mid>9000000007</ns1:mid>
            <ns1:currency>MXN</ns1:currency>
            <ns1:totalPayoutAmount>30.0</ns1:totalPayoutAmount>
            <ns1:totalPaymentAmount>2.2</ns1:totalPaymentAmount>
            <ns1:creditLine>10000.0</ns1:creditLine>
            <ns1:totalPayoutBalance>9972.2</ns1:totalPayoutBalance>
            <ns1:dailyPayoutLimit>10000.0</ns1:dailyPayoutLimit>
            <ns1:dailyPayoutAmount>10.0</ns1:dailyPayoutAmount>
            <ns1:dailyPayoutBalance>9990.0</ns1:dailyPayoutBalance>
        </ns1:payoutState>
    </ns1:getPayoutStateReturn>
</ns1:getPayoutStateResponse>
```

## REST
### Validating a payout [/payouts]
| Parameter                     | Type [validation]    | Required | Example            | Description                          |
| ---                           | ---     | ---      | ---                | ---                                  |
| `type`                        | string<br/>[PAYSAFECARD]  | required | paysafecard        | Must be set to PAYSAFECARD|
| `payout_instrument` | string<br/>[SAFETYPAY] | required | safetypay | Must be set to SAFETYPAY
| `capture`               | boolean<br/>[true,false] | required | true or false |Defines whether to validate (false) or conduct a payout (true) |
| `amount`                      | float or integer<br/>[max length: 11 digits before, optionally 2 digits after decimal point]   | required | 10.00            | The precision needs to be two digits after the colon|
| `currency`                    | string<br/> [max. length: 3, all uppercase]  | required | EUR             | ISO 4217 (3 letter ISO currency code) |
| `customer[id]`           | string<br/> [max. length: 60] | required| uniquecustomerid | Unique id of the customer in your system |
| `customer[email]`           | string<br/> [valid email address] | required if `[psc_id]` not provided| valid@email.com                            | Needs to be the email that the customer used to register for myPaysafecard |
| `customer[date_of_birth]`         | string<br/>[yyyy-mm-dd]  | required| 1996-10-20 | Date of birth of the customer |
| `customer[first_name]`| string<br/> [max. length: 60]  | required|  Max                           | Firstname of the customer | 
| `customer[middle_name]` |string <br/>[max. length: 60] | optional | Diego | Middle name of the customer |
| `customer[last_name]`| string<br/>[max. length: 60] | required |  Power                           | Lastname of the customer | 
| `customer[phone_number]` | string <br/>[max. length: 20]| optional | Brazil: +5511984565666 <br/> Peru: +5117097831 <br/> Mexico:  +525516690627 | Phone number valid according to the ITU-T E.164 |
| `customer[ip_address]` |string <br/> |optional | 123.456.123.456 | IP address of the customer |
| `bank_account[type]` | string <br/>[max. length: 12] | required | CLABE |Type of the beneficiary bank account. See section "Code books" for more information |
| `bank_account[number]` | string <br/>[max. length: 50] | required | 123456789034567896 |The number of the recipient's bank account. See section "Code books" for more information |
| `id_document[type]` | string <br/>[max. length: 3] | required | RFC | The type of the customer's ID document. See section "Code books" for more information|
| `id_document[number]` | string <br/> [max. length 50] | required | HEGJ820506M10 | The ID document's number. See section "Code books" for more information |
| `submerchant_id`| string <br/>[max. length: 8, allowed characters: alphanumeric]| Optional(exception: Payment Service Provider)| RCxD1234 | The sub-merchant id. Also known as reporting criteria|
| `notification_url` | string <br/> | optional | https://notification.com/webhook | Notification URL we will contact after the status of the Payout has been changed |
| `description` | string <br/> [max. length: 120] | optional | Winnings payout | Description of the payout transaction |

#### Validate a new payout [POST]
+ Request (application/json)

    + Headers

                Authorization: Basic cHNjX0JpT2U2ME9EM2hoNEdsbkhSWUdoTXdybm0ycC1PeTk=

    + Attributes (PayoutRequestSafetypayValidation)

+ Response 201 (application/json)

    + Attributes (PayoutRequestSafetypayValidationResponse)
    
### Capturing a pre validated payout [/payouts/{id}/capture]

| Parameter                     | Type    | Required | Example            | Description                          |
| ---                           | ---     | ---      | ---                | ---                                  |
| `id`                  | string  | required | out_1000067708_oxL2u5gZ57aqnDU4TfRsAxn6cK05NkXt_MXN | id from Step 1 |

Using the payout ID of a previously validated or conducted payout call and if the payout identified by the provided `id` is in status `VALIDATION_SUCCESSFUL` the payout will be executed.

#### Capture a pre validated payout [POST]
+ Parameters

    + id: `out_1000067708_oxL2u5gZ57aqnDU4TfRsAxn6cK05NkXt_MXN` (required) - Id of a prevalidated payout
 
+ Request (application/json)

    + Headers

                Authorization: Basic cHNjX0JpT2U2ME9EM2hoNEdsbkhSWUdoTXdybm0ycC1PeTk=
    
+ Response 200 (application/json)

    + Attributes (PayoutResponseSafetypay)

### Retrieve payouts [/payouts/{id}]
Used to retrieve payouts by provided `id`.
#### Retrieve payouts [GET]
+ Parameters

    + id: `out_1000067708_oxL2u5gZ57aqnDU4TfRsAxn6cK05NkXt_MXN` (required) - Id of a prevalidated or captured payout

+ Request (application/json)

    + Headers

                Authorization: Basic cHNjX0JpT2U2ME9EM2hoNEdsbkhSWUdoTXdybm0ycC1PeTk=
                
+ Response 200 (application/json)

    + Attributes (PayoutRequestSafetypayValidationResponse)

### Retrieve limits [/payouts/limits/{currency}]

Used to retrieve limits information for a specific `currency`. The `currency` must be provided according to ISO 4217 (3 letter ISO currency code).
If no currency is specified, all associated MID’s limits infromation will be returned.

#### Retrieve limits [GET]

+ Parameters

    + currency: `MXN` (required) - 3 letter ISO currency code

+ Request (application/json)

    + Headers
    
                Authorization: Basic cHNjX0JpT2U2ME9EM2hoNEdsbkhSWUdoTXdybm0ycC1PeTk=

+ Response 200 (application/json)

    + Attributes (PayoutLimitResponseSP)

# Group Payout Error Codes
|Code                                    |Number (optional)  |HTTP Status      |Description          |
|---                                     |---                |---              |---                  |
|`Missing_mandatory_parameter`                     |3150               |400              |Self explanatory - I.E:"Missing mandatory parameter CustomerIdentifier" if the parameter "CustomerIdentfier" is missing in the payout request|
|`Merchant_not_allowed_to_perform_this_action`       |3161               |400              |The merchant account has not been activated for the usage of payouts. Please contact your account manager or the integration team to inquire about the status of payout activation for your account.|
|`Duplicate_payout_request`              |3164               |400              |Transaction already exists. We only allow unique values for payout requests.|
|`Invalid_amount`                        |3165               |400              |Invalid amount.|
|`Merchant_limit_reached`                |3166               |400              |Merchants payout limit reached. You can inquire the current limits of your account using the [getPayoutState](#retrieve_limits) call. |
|`Payout_id_collides_with_existing_disposition_id`                   |3169               |400              |We do not allow the payout ID to be the same as a previously used payment ID. Please use unique identifiers always.|
|`Payout_amount_is_below_minimum_payout_amount_of_the_merchant`           |3171               |400              |Self explanatory|
|`Payout_blocked_due_to_security_reasons`                        |3199               |400              |Self explanatory|
|`Invalid_combination_of_parameters`                        |3299               |400              |Invalid combination of country, currency, bank account type or ID document type|

Other errors can be communicated to the customer as “general technical error”. In general when one of these 
errors occur the business partner should contact paysafecard immediately via integration@paysafecard.com if the account is not live.
For live accounts, techsupport@paysafecard.com should be contacted.

# Group Code books
<b>idDocument.type</b>
|Code|Official document name|Country|Validation|Example|
|----|----------------------|-------|----------|-------|
|CPF|Cadastro de Pessoas Físicas|BRA|^[0-9]{11}$|37968291801|
|RFC|Registro Federal Contribuyentes|MEX|^([A-ZÑ&]{4}) ?(?:- ?)?(\d{2}(?:0[1-9]\|1[0-2])(?:0[1-9]\|[12]\d\|3[01])) ?(?:- ?)?([A-Z\d]{2})([A\d])$|HEGJ820506M10|
|DNI|Documento Nacional de Identidad|PER|^[0-9]{8}$|44851534|
|PAS|Pasaporte|PER|^[A-Za-z0-9]{7,12}$|8345627394AB|
|CE|Carne de Identidad para Extranjeros|PER|^[A-Za-z0-9]{8,20}$|A847635253910|


<b>bankAccount.type</b>
|Code|Description|Country|Validation|Example|
|----|-----------|-------|----------|-------|
|CLABE|Standardized Bank Key or Clave Bancaria Estandarizada |MEX|^\d{18}$|123456789034567896|
|CPF|CPF|BRA|^[0-9]{11}$|11831541602|
|Email|Email (used for PIX payments)|BRA|^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,77}$|test@test.com|
|Phone|Phone (used for PIX payments)|BRA|^[0-9]{11}$|31971212883|
|EVP|Random Key (used for PIX payments)|BRA|([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})|23e05112-0dfd-4c2b-b433-d6420967dbbe|
|Checking*|Interbank account number|PER|^[0-9]{20}$|00211111111111111111|
|Savings*|Interbank account number|PER|^[0-9]{20}$|00211111111111111111|
\* must start with one of 002, 003, 007, 009, 011, 018, 023, 035, 038, 049, 053, 054, 055, 056, 058, 059, 060, 800, 801, 802, 803, 805, 806, 808, 809, 811, 813. Both Checking and Savings for Peru use the CCI bank account format

# Group Payout notification
The payout notification is used to notify the business partner independently of the result of the payout processing. Possible values of the STATUS attribute are SUCCESS or FAILED. 

In case of technical errors (e.g. socket timeout), or application errors (e.g. HTTP 500 response), the payout notification is resubmitted at a regular interval until one of the following criteria is fulfilled:

+ Either the payout notification is successfully delivered (i.e. HTTP 200 response from the server).
+ Or the maximum number of retry attempts has been reached (currently configured at 5 retries).
+ The payout notification will be sent from either of the below IP addresses:
  * 3.64.155.76
  * 3.76.4.148
  * 3.127.123.143
  * 176.34.172.250
  * 54.228.173.185
  * 18.197.120.90
  * 18.158.237.76
  * 52.48.213.182
  * 18.200.202.144

Example payload:
```
{
    "timestamp": 1601916702012,
    "eventType": "PAYOUT_STATUS_CHANGE",
    "version": "1",
    "data": {
        "id": "out_1000037854_horvath8870-correlationId-5_MXN",
        "currency": "MXN",
        "status": "VALIDATION_SUCCESSFUL",
        "amount": 152.34,
        "payout_instrument": "SAFETYPAY",
        "country_code": "MX",
        "bank_account": {
            "type": "CLABE",
            "number": "HEGJ820506M10"
        }
    }
}
```

# Group Bank IDs
You can supply one or more Bank IDs in the API request, restricting the customer to only these SafetyPay options.

Sending this parameter without "payment_instrument" does not limit the customer to SafetyPay.


|Payment Instrument Subtype | Country | Bank ID | Bank Name | Bank Provider Name
| --- | --- | --- | --- | ---
| online | AR | 8614 | ITAU Debin | ITAU Debin
| cash   | AR | 8606 | Pago Facil | Pago Facil
| online | AR | 1000 | MERCADO PAGO ARG | Khipu
| online | AR | 1027 | HSBC ARG | Khipu
| online | AR | 8654 | BBVA ARG | Khipu
| online | AR | 8655 | BANCO CIUDAD ARG | Khipu
| online | AR | 8656 | GALICIA ARG | Khipu
| online | AR | 8657 | ICBC ARG | Khipu
| online | AR | 8658 | MACRO ARG | Khipu
| online | AR | 8659 | BANCO NACION ARG | Khipu
| online | AR | 8661 | SUPERVIELLE ARG | Khipu
| online | BR | 8366 | Banco Itau Boleto | Banco Itau Boleto (also called "Itau Unibanco")
| cash   | BR | 8366 | Banco Itau Boleto | Banco Itau Boleto (also called "Itau Unibanco")
| online | BR | 4081 | Banco Itau Robot | Banco Itau
| online | BR | 8183 | Banco do Brasil Robot | Banco do Brasil
| online | BR | 8183 | Banco do Brasil SafetyPay | Banco do Brasil
| online | BR | 8326 | Bradesco PagFacil | Bradesco Pagfacil
| cash   | BR | 8326 | Bradesco PagFacil | Bradesco Pagfacil
| cash   | BR | 8176 | Caixa Econômica Federal | Caixa Econômica Federal
| online | BR | <strike>8439 | <strike>PIX | <strike>Bradesco PIX</strike> (updating to 8619 below)
| online | BR | 8619 | PIX | Bradesco PIX
| online | BR | 8042 | Santander Brasil | Santander Brasil
| online | CL | 8296 | Banco BCI One Step | Banco BCI
| cash   | CL | 8194 | Banco Estado | Banco Estado Recaudo Referenciado
| online | CL | 8194 | Banco Estado | Banco Estado Recaudo Referenciado
| online | CL | 8291 | Banco Estado One Step | Banco Estado Boton de Pago
| online | CL | 8488 | Khipu | Khipu
| online | CL | 8493 | Khipu - BCI | Khipu
| online | CL | 8492 | Khipu - Banco Estado | Khipu
| online | CL | 8490 | Khipu - Banco de Chile | Khipu
| online | CL | 8494 | Khipu - Itau | Khipu
| online | CL | 8491 | Khipu - Santander | Khipu
| online | CL | 8416 | MachPay | Machpay BCI
| online | CL | 8457 | Scotiabank Chile | Scotiabank Chile
| cash   | CL | 8198 | Walmart Chile | Walmart Chile
| cash   | CO | 8463 | Acciones y Valores | Acciones y Valores
| cash   | CO | 8157 | Baloto | Payvalida
| online | CO | 8503 | COOFINEP | Banco de Occidente COL
| cash   | CO | 8224 | Efecty | Efecty
| cash   | CO | 8231 | MovilRed Colombia | MovilRed Colombia
| online | CO | 4100 | PSE - BANCOOMEVA | Banco de Occidente COL
| online | CO | 1099 | PSE - BBVA Colombia | Banco de Occidente COL
| online | CO | 8396 | PSE - Bancamía | Banco de Occidente COL
| online | CO | 4089 | PSE - Banco AV Villas | Banco de Occidente COL
| online | CO | 8185 | PSE - Banco Agrario | Banco de Occidente COL
| online | CO | 4090 | PSE - Banco Caja Social | Banco de Occidente COL
| online | CO | 4091 | PSE - Banco Colpatria | Banco de Occidente COL
| online | CO | 8163 | PSE - Banco Cooperativo Coopcentral | Banco de Occidente COL
| online | CO | 4093 | PSE - Banco Davivienda | Banco de Occidente COL
| online | CO | 5000 | PSE - Banco Falabella | Banco de Occidente COL
| online | CO | 4095 | PSE - Banco GNB Sudameris | Banco de Occidente COL
| online | CO | 4096 | PSE - Banco Pichincha COL | Banco de Occidente COL
| online | CO | 4097 | PSE - Banco Popular | Banco de Occidente COL
| online | CO | 4098 | PSE - Banco ProCredit | Banco de Occidente COL
| online | CO | 8389 | PSE - Banco Serfinanza | Banco de Occidente COL
| online | CO | 4087 | PSE - Banco de Bogota | Banco de Occidente COL
| online | CO | 4094 | PSE - Banco de Occidente | Banco de Occidente COL
| online | CO | 4099 | PSE - Bancolombia | Banco de Occidente COL
| online | CO | 4102 | PSE - Citibank Colombia | Banco de Occidente COL
| online | CO | 8372 | PSE - Confiar Cooperativa Financiera | Banco de Occidente COL
| online | CO | 8390 | PSE - Cooperativa Financiera de Antioquia | Banco de Occidente COL
| online | CO | 8475 | PSE - DALE | Banco de Occidente COL
| online | CO | 8371 | PSE - Daviplata | Banco de Occidente COL
| online | CO | 8476 | PSE - GIROS Y FINANZAS | Banco de Occidente COL
| online | CO | 8477 | PSE - IRIS | Banco de Occidente COL
| online | CO | 4092 | PSE - Itau Corpbanca Colombia S.A. | Banco de Occidente COL
| online | CO | 8474 | PSE - MOVII S.A. | Banco de Occidente COL
| online | CO | 8276 | PSE - Nequi | Banco de Occidente COL
| online | CO | 8397 | PSE - RappiPay COL | Banco de Occidente COL
| online | CO | 8332 | PSE - Santander COL | Banco de Occidente COL
| cash   | CO | 8323 | SuRed | Sured
| online | CR | 1021 | Banco Nacional de Costa Rica | Banco Nacional de Costa Rica
| cash   | CR | 1021 | Banco Nacional de Costa Rica | Banco Nacional de Costa Rica
| cash   | CR | 8531 | Paycash Costa Rica | Paycash Costa Rica
| cash   | EC | 8216 | Banco Guayaquil | Banco Guayaquil
| online | EC | 8216 | Banco Guayaquil | Banco Guayaquil 
| online | EC | <strike>8066 | <strike>Banco Pichincha ECU | <strike>Banco Pichincha ECU</strike> (temporarily disabled)
| cash   | EC | <strike>8066 | <strike>Banco Pichincha ECU | <strike>Banco Pichincha ECU</strike> (temporarily disabled)
| cash   | EC | 8458 | Facilito | Facilito
| cash   | EC | 8401 | Red Activa | Red Activa
| cash   | GT | 8404 | PuntoXpress GTM | Punto Xpress GTM
| cash   | MX | 8425 | Afirme PayCash | Paycash  
| online | MX | 8425 | Afirme PayCash | Paycash  
| cash   | MX | 1020 | BBVA Bancomer | BBVA Bancomer
| online | MX | 1020 | BBVA Bancomer | BBVA Bancomer
| cash   | MX | 8186 | Banco Azteca | Banco Azteca
| cash   | MX | 1026 | Banorte | Banorte
| cash   | MX | <strike>1052 | <strike>HSBC Mexico | <strike>HSBC Mexico</strike> (temporarily disabled)
| online | MX | <strike>1052 | <strike>HSBC Mexico | <strike>HSBC Mexico</strike> (temporarily disabled)
| cash   | MX | 8178 | OpenPay | OpenPay
| cash   | MX | 8419 | PayCash | Paycash  
| online | MX | 8526 | SPEI STP | STP
| cash   | MX | 8395 | Santander MEX WS | Banco Santander
| online | MX | 8395 | Santander MEX WS | Banco Santander
| online | MX | 1007 | Scotiabank Mexico | Scotiabank Mexico
| cash   | MX | 1007 | Scotiabank Mexico | Scotiabank Mexico
| cash   | PA | 8188 | Western Union Panama | Western Union Panama
| cash   | PE | 8443 | Agente Niubiz | Niubiz
| cash   | PE | 8321 | Agentes Kasnet | Western Union
| online | PE | 1001 | BBVA Continental | BBVA Continental
| cash   | PE | 1001 | BBVA Continental | BBVA Continental
| online | PE | 8391 | BCP Cuotéalo | Banco de Crédito Cuotealo
| online | PE | 8441 | Banco Pichincha PER | Pichincha PER
| cash   | PE | 8441 | Banco Pichincha PER | Pichincha PER
| cash   | PE | 1005 | Banco de Crédito | Banco de Crédito
| online | PE | 1005 | Banco de Crédito | Banco de Crédito
| online | PE | 8324 | Caja Arequipa | Caja Arequipa
| cash   | PE | 8324 | Caja Arequipa | Caja Arequipa
| cash   | PE | 8250 | Caja Huancayo | Caja Huancayo
| online | PE | 8250 | Caja Huancayo | Caja Huancayo
| online | PE | 1024 | Caja Tacna | Caja Tacna
| cash   | PE | 1024 | Caja Tacna | Caja Tacna
| online | PE | 1025 | Caja Trujillo | Caja Trujillo
| cash   | PE | 1025 | Caja Trujillo | Caja Trujillo
| cash   | PE | 8442 | Globokas - Kasnet | Globokas - Kasnet
| cash   | PE | 1011 | Interbank | Interbank
| online | PE | 1011 | Interbank | Interbank
| online | PE | 8502 | PagoEfectivo QR | PagoEfectivo QR (can also be accepted via 8510 "PagoEfectivo" if the customer didn't pay with the QR code)
| cash   | PE | 8444 | Red Digital | Red Digital
| online | PE | 1006 | Scotiabank Peru | Scotiabank Peru
| cash   | PE | 1006 | Scotiabank Peru | Scotiabank Peru
| cash   | PE | 8440 | Tambo+ | Tambo 
| cash   | PE | 8320 | Western Union | Western Union
| cash   | PE | 8320 | Western Union | Western Union
| cash   | SV | 8300 | Punto Xpress SLV | Punto Xpress SLV

####Bank ID Updates:
#####2024-06-03
Replacing "PIX" 8439 (BR) with "PIX" 8619 (BR)

#####2024-05-14
Temporarily deactivated "Banco Pichincha ECU" 8066 (EC)

#####2024-01-17
Temporarily deactivated "HSBC Mexico" 1052 (MX)

#####2023-11-22
Added "ITAU Debin" 8614 (AR) / "Pago Facil"  8606 (AR)

#####2023-09-05
Removed "SPEI MX" 8191 (MX)
Added "SPEI STP" 8526 (MX)

#####2023-04-17
Added "Paycash Costa Rica" 8531 (CR)

#####2022-09-28
Added "PagoEfectivo QR" 8502 (PE)

#####2022-09-28
Removed "Bradesco Robot" / "Bradesco Safetypay" 8210 (BR)

#####2022-09-28
Added "Acciones y Valores" 8463 (CO)

#####2022-09-07
Removed "Banco do Brasil Web Service" 8339 (BR)

Removed "Banrisul" 1022 (BR)




# Data Structures

## TypedObject (object)
+ type: PAYSAFECARD (required, fixed) - Type of the product, must be set to PAYSAFECARD.

## PaymentRequest (TypedObject)
+ amount: 0.01 (number, required) - Payment amount, precision must be 2 digits after the colon.
+ currency: EUR (required) - ISO 4217 - 3 letter ISO currency code.
+ redirect (object) 
    + `success_url`: https://notification.com/{payment_id} (required) - URLs to redirect after successful or failed authorization. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
    + `failure_url`: https://notification.com/{payment_id} (required) - URLs to redirect after customer clicked on cancel. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ `notification_url`: https://notification.com/{payment_id} (required)- Notification URL we will contact after the authorization has been successfully completed. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ customer (object) 
    + id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation (required) - Only the id is mandatory. It´s value uniquely identifies the customer and is provided by you. If any personal data e.g. customer´s user name, email address, is used here, it has to be encrypted or hashed for security reasons. Mandatory to line up with the id during payout later.
    + min_age: 18 (optional) - Valid for my paysafecard payments. For additional information about my paysafecard, please see the section "my paysafecard". Restricts payments to my paysafecard customers only, who are equal to or older than the specified age. Please note: This means that it is required that the customer has a registered my paysafecard account to make the payment. 
    + kyc_level: SIMPLE (optional) - Valid values SIMPLE or FULL. These values refer to the KYC level of the customer's my paysafecard account. Depending on the country, my paysafecard accounts are offered with SIMPLE and/or FULL customer identification.
    + country_restriction: AT (optional) - ISO 3166-1 alpha-2 two-letter country code used to restrict payments to residents of a particular country. Mandatory for SafetyPay payouts for this customer.
+ customer_takeover_data (object)
    + account_registration_country: MX (string, optional) - The registration country of the payer's account with the partner. Mandatory for SafetyPay payouts to this customer later.
    + account_KYC_level: FULL (string, optional) - The KYC level of the payer's account with the partner. Mandatory for SafetyPay payouts to this customer later.
    + account_registration_date: 2017-05-15 (string, optional) - The registration date of the payer's account with the partner. Mandatory for SafetyPay payouts to this customer later.
+ submerchant_id: 1 (optional) - Also called ‘reporting criteria’, offers the possibility to classify sub-merchants. Agreement with paysafecard needed - not agreed values lead to a failed payment. max. 8 digits in alpha numeric code
+ shop_id: `shop1` (optional) - Identification of the shop which is the originator of the request. This is most likely used by payment service providers who act as a proxy for other payment methods as well.

## PaymentResponse (TypedObject)
+ id: pay_1000000007_k3JfFMcpLPXGMk1mOdkbmRARdr5kKQeI_EUR - The unique id of this payment
+ created: 1430317131908 (number)
+ updated: 1430317131908 (number)
+ amount: 0.01 (number)
+ currency: EUR (required) - ISO 4217 (3 letter ISO currency code).
+ status: SUCCESS
+ redirect (Redirect)
+ `notification_url`: https://notification.com/{payment_id} (required)- Notification URL we will contact after the authorization has been successfully completed. The placeholder {payment_id} in the URL is replaced with the actual ID of this payment.
+ customer (CustomerResponseFull)
+ card_details (array[CardDetails])

## CardDetails (object)
+ serial: 1453591278
+ currency: EUR
+ amount: 0.01
+ type: 00002
+ country: AT 

## CustomerResponseFull (object)
+ id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation (string) - The customer Id provided.
+ ip: 81.20.128.34 (string) - The customer IP address.
+ psc_id: 779456189809 (number) The customer paysafecard identifier.
+ first_name: SuAeRHtjkNJSoraWHZAERgaRdA (string) - Test The customer first name. 
+ Last_name: VgObhlCPEXNexGsXqSuIWhzDtt (string) - The customer last name.
+ date_of_birth: 1986-06-28 (string) - The customer date of birth.
+ account_created: 2001-01-22 (string) - The customer my paysafecard account creation date.

## PayoutCustomer (object) - In general
+ id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation
+ email: psc.mypins+9000001500_xZteDVTw@gmail.com (required) - the customer identifier
+ psc_id: 779456189809 (number, optional) - my paysafecard account ID
+ date_of_birth: `1986-06-28` (required)
+ first_name: SuAeRHtjkNJSoraWHZAERgaRdA (required)
+ last_name: VgObhlCPEXNexGsXqSuIWhzDtt (required)

## Redirect (object)
+ `success_url`: https://ok.com/{payment_id}
+ `failure_url`: https://nok.com/{payment_id}

## PayoutRequest (TypedObject)
+ amount: 0.01 (number, required) - Payout amount, precision must be 2 digits after the colon.
`10.00`
+ currency: EUR (string, required) - ISO 4217 (3 letter ISO currency code).
+ customer (PayoutCustomer)
+ comment: 'Winnings Pay Out' (string, optional)

## PayoutRequestSafetypayValidation (object)
+ type: PAYSAFECARD (string,required) - Payment type. Must be set to PAYSAFECARD.
+ payout_instrument: SAFETYPAY (string,required) - Payout instrument. Must be set to SAFETYPAY.
+ capture: false (boolean,required) - Defines whether to validate (false) or conduct a payout (true).
+ amount: 1000 (number, required) - Payout amount
+ currency: MXN (string, required) - Payout currency
+ country_code: MX (string, required) - Country of the payout beneficiary
+ customer (object)
    + id: customer1 (string,required) - Unique id of the customer in your system. Needs to line up with an id previously used for deposit by the same customer.
    + email: validemail1@gmail.com (string, optional) - Valid email adress of the payout customer
    + date_of_birth: 1996-10-20 (string, required) - The date of birth of the payout customer in YYYY-MM-DD format
    + first_name: John (string, required) - The first name of the customer
    + middle_name: William (string, optional) - The middle name of the customer
    + last_name: Doe (string, required) - The last name of the customer
    + phone_number: +43 123123123 (string, optional) - The phone number of the payout customer
    + account_created: 2021-06-15 (string, required) - Customer's merchant account creation date
    + country: MX (string, required) - Customer's country
    + kyc_level: FULL (string,required) - Customer's verification level. SIMPLE=not verified, FULL=verified
    + ip: 13.248.166.223 (string, optional) - IP address of the customer
+ bank_account (object)
    + type: CLABE (string, required) - Type of the customer's bank account, See section "Code books" for more information
    + number: 1234567890 (number,required) - Bank account number
+ id_document (object)
    + type: RFC (string,required) - Type of the customer's ID document
    + number: 1234567890 (string,required) - Number of the customer's ID document
+ submerchant_id: 1 (string, optional) - The sub-merchant id. Also known as reporting criteria
+ notification_url: https://notification.com/webhook (string,optional) - Notification URL we will contact after the status of the payout has been changed
+ description: Winnings payout (string, optional) - Additional information/comments on the payout

## PayoutRequestSafetypayValidationResponse (object)
+ object: payout (string) - Type of object, always payout
+ id: out_1000067708_FfCOjVmv2r9qFncn0StiCTYJ6yDiAPDr_MXN (string) - The payout ID
+ created: 1699533982066 (number) - Unix timestamp of the creation date
+ updated: 1699533982075 (number) - Unix timestamp when the object was updated
+ currency: MXN (string) - ISO currency code
+ customer (object)
    + id: testmerchantpayoutSP1 (string) - Unique id of the customer in your system
    + email: validemail1@gmail.com (string) - Valid email adress of the payout customer
    + first_name: John (string) - The first name of the customer
    + middle_name: William (string) - The middle name of the customer
    + last_name: Doe (string) - The last name of the customer
+ status: VALIDATION_SUCCESSFUL (string) - The status of the payout validation
+ description: Winnings payout (string) - Additional information/comments on the payout
+ amount: 1000 (number) - Payout amount
+ payout_instrument: SAFETYPAY (string) - Payout instrument
+ country_code: MX (string) - Country of the payout beneficiary
+ bank_account (object)
    + type: CLABE (string) - Type of the customer's bank account, See section "Code books" for more information
    + number: 1234567890 (number) - Bank account number
+ id_document (object)
    + type: RFC (string) - Type of the customer's ID document
    + number: 1234567890 (string) - Number of the customer's ID document
+ notification_url: https://notification.com/webhook (string) - Notification URL we will contact after the status of the payout has been changed

## PayoutResponseSafetypay (object)

+ object: payout (string) - Type of object, always payout
+ id: out_1000067708_oxL2u5gZ57aqnDU4TfRsAxn6cK05NkXt_MXN (string) - The payout ID
+ created: 1699533982066 (number) - Unix timestamp of the creation date
+ updated: 1699533982075 (number) - Unix timestamp when the object was updated
+ currency: MXN (string) - ISO currency code
+ customer (object)
    + id: testmerchantpayoutSP1 (string) - Unique id of the customer in your system
    + email: validemail1@gmail.com (string) - Valid email adress of the payout customer
    + first_name: John (string) - The first name of the customer
    + middle_name: William (string) - The middle name of the customer
    + last_name: Doe (string) - The last name of the customer
+ status: PENDING (string) - The status of the payout
+ description: Winnings payout (string) - Additional information/comments on the payout
+ amount: 1000 (number) - Payout amount
+ payout_instrument: SAFETYPAY (string) - Payout instrument
+ country_code: MX (string) - Country of the payout beneficiary
+ bank_account (object)
    + type: CLABE (string) - Type of the customer's bank account, See section "Code books" for more information
    + number: 1234567890 (number) - Bank account number
+ id_document (object)
    + type: RFC (string) - Type of the customer's ID document
    + number: 1234567890 (string) - Number of the customer's ID document
+ notification_url: https://notification.com/webhook (string) - Notification URL we will contact after the status of the payout has been changed

## PayoutLimitResponseSP (object)
+ currency: PEN (string) - ISO 4217 (3 letter ISO currency code)
+ credit_line: 0.00 (number) - The added credit limit
+ daily_payout_amount: 27.47 (number)
+ total_payment_amount: 47.92 (number)
+ total_payout_amount: 297.12 (number)
+ total_payout_balance: `-249.20` (number)
+ mid: 1000067595

## PayoutLimitResponse (object)
+ currency: EUR - ISO 4217 (3 letter ISO currency code)
+ mid: 1000003517
+ credit_line: 0 (number)
+ daily_payout_amount: 27.47 (number)
+ daily_payout_balance: 999972.53 (number)
+ daily_payout_limit: 1000000 (number)
+ total_payment_amount: 47.92 (number)
+ total_payout_amount: 297.12 (number)
+ total_payout_balance: `-249.20` (number)

## PayoutValidationRequest (PayoutRequest)
+ capture: false (boolean) - To perform a validation only, set it to false

## PayoutCaptureRequest (PayoutRequest)
+ capture: true (boolean) - To perform the capture, set it to true

## PayoutResponse (object)
+ object: payout (string) - Type of object, always payout
+ id: out_9000001500_2838fhsd6dashsdkfsd_EUR (string) - The payout ID
+ created: 1430137532383 (number) - Unix timestamp of the creation date
+ updated: 1430137532383 (number) - Unix timestamp when the object was updated
+ currency: EUR (string) - ISO currency code
+ amount: 10.00 (number) - Payout amount
+ customer (object)
    + id: kfoLkCq3RBIJiJF6sJWBeYA4tnfsCms2
    + email: valid@email.com

## PayoutGetValidatedResponse (PayoutResponse)
+ status: VALIDATION_SUCCESSFUL

## PayoutConvertedCustomerAmounts (PayoutResponse)
+ customer_currency: EUR
+ customer_amount: 5.00 (number)

## PayoutValidationResponse (PayoutConvertedCustomerAmounts)
+ status: VALIDATION_SUCCESSFUL

## PayoutCaptureResponse (PayoutConvertedCustomerAmounts)
+ status: SUCCESS

## RefundRequest (TypedObject)
+ amount: 0.01 (number, required)
+ currency: EUR (required)
+ customer (object, required)
    + id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation (required) 
    + email: psc.mypins+9000001500_xZteDVTw@gmail.com (required)
+ comment: Non-Wagered Funds (string, optional)

## RefundValidationRequest (RefundRequest)
+ capture: false (boolean, required)

## RefundCaptureRequest (RefundRequest)
+ capture: true (boolean, required)

## RefundResponse (object)
+ object: refund - Type of object, always refund
+ id: ref_1000000007_2838fhsd6dashsdkfsd_EUR
+ created: 1430137532383 (number)
+ updated: 1430137532383 (number)
+ currency: EUR
+ amount: 10.00
+ customer (object)
    + id: merchantclientid5HzDvoZSodKDJ7X7VQKrtestAutomation
    + email: valid@email.com
+ status : SUCCESS
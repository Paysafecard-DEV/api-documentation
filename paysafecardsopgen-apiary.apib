FORMAT: 1A
HOST: https://soatest.paysafecard.com/psc/services/PscService

# paysafecard SafetyPay Payouts integration

This documentation explains how to start creating SafetyPay Payouts. It is an add-on to the classic paysafecard integration:

**REST API**:

https://www.paysafecard.com/en/business/downloads/

**SOAP API**:

https://www.paysafecard.com/en/business/downloads/

https://www.paysafecard.com/fileadmin/api/paysafecardsopg.html


## Group Where to start?
To initiate the process of creating a SafetyPay payouts, the business partner must contact the account manager directly or at sales@paysafecard.com. Once the business process is finished, the feature will be activated from paysafecard side. The feature will be activated per MID (Merchant ID).There are also some technical integration changes necessary, which will be described in detail here.

## Group Payout Process

SafetyPay Payout allows the transfer of funds to bank account holders in selected LATAM countries. SafetyPay Payout is executed by the business partner at the 
demand of the customer. SafetyPay Payout is only available in the following countries: Peru, Mexico, Brazil.


![Payment Flow](https://www.paysafecard.com/fileadmin/api/images/Safetypay_payouts_flow.png)

- Step 1: Customer creates a payout request on merchant’s checkout

    On the website of the business partner (merchant), the customer requests a payout.
    
    User must accept SafetyPay’s T&C and Privacy Policies.
    
    Merchant must mention in its Terms & Conditions (T&C) that Payouts are executed by SafetyPay

- Step 2: Merchant validates and completes the request and forwards it to paysafecard

    The business partner provides thecustomer’s personal details to paysafecard during the payout call.

- Step 3: Paysafecard performs AML screening and sends the request to the partner bank

    Paysafecard and SafetyPay executes a screening using an international AML blacklists. This means every transaction request will be screened and blocked if the beneficiary is present on the blacklist.

- Step 4: Partner bank validates the payee and executes a payout

    Only transactions with a match between the beneficiary specified by the merchant and the bank account owner will be processed. This means that the customer won’t be able to make a payout to a third party’s bank account.
    SafetyPay transfers the money to the customer my paysafecard account.

- Step 5: paysafecard notifies the Merchant of the payout result

    Paysafecard notifies the merchant about the result of the payout operation via API.


# Exchange of customer data
    - For each payout request the business partner needs to provide the following customer’s personal details to paysafecard during the payout call. TODO paysafecard automatically validates the provided data against the registered my paysafecard account data.
        
        The payout will be refused if the data does not match.
    


# Getting the MID limits
    - The business partner has one MID (for each currency, each MID has its own payout limit - the amount that still can
        be paid out by the merchant), information about the financial condition of a MID can be retrieved real-time via [getPayoutState](#retrieve_limits). Automatically all associated MID’s will be returned.
    - As soon as a MID limit is reached, payout on this MID is not possible for this time-period.
    

# Settlement
- All payout transactions need to be paid by the business partner. The total monthly payout amount is automatically deducted (netted) from the monthly payment amount.
- The total amount of payout money may exceed the total amount of payment money up to a certain level.
- Detailed information on this level can be retrieved with the function [getPayoutState](#retrieve_limits).
        
        

## Reporting Criteria
Offers the possibility to classify sub-merchants. Agreement with paysafecard needed - not agreed values lead to a failed payment. 
<br>Reporting Criterias add an additional layer to an MID and allow for a logical separation of brands and merchants on our side. 

| Parameter        | Description                                                                                                                     | Format                          |
|------------------|---------------------------------------------------------------------------------------------------------------------------------|---------------------------------|
| `subId` | The Reporting Criteria (or submerchant Id) is used to classify sub-merchants. The setup of RCs must be agreed with paysafecard. | Up to 8 alphanumeric characters | 

*Please note: When integrating as a <b>Payment Service Provider</b> payments will be processed on behalf of merchants. In this case this <b>parameter is mandatory</b>. The parameter has to be included in all paysafecard Payment, Payout and Refund requests for <b>Payment Service Providers</b>.*



## Payout implementation

- Prerequisites
    - SOPG Username and Password for request authentication provided by paysafecard. User will have functions for payment and refund available.
    - Authorization of the payment server IP address in the production environment (if a 403 error is received when trying to access the service, it is likely that the IP address is not yet allowed to access).
    - Content-type: Please make sure that the content type in the HTTP header, when submitting requests, is set to Content-Type: application/xml
    - Character encoding needs to be in UTF-8.
    - The business partner received a my paysafecard account for testing purposes.

- Interface guidelines
    - From a customer perspective, following requirements must be met:
        User must accept SafetyPay’s T&C and Privacy Policies.
        Merchant must mention in its Terms & Conditions (T&C) that Payouts are executed by SafetyPay

##Description of Parameters
+ username – business partner account username 
  * provided by paysafecard for the authentication.
+ password – business partner account password  
  * provided by paysafecard for the authentication 
+ ptid – transaction id, unique identifier for each disposition.  
  * must be unique, also if the transaction failed
  * must be different from mtid used during payment
  * max. length: 90 characters  
  * recommended value: up to 20 characters  
  * provided by business partner  
  * only the following is allowed: A-Z, a-z, 0-9 as well as – (hyphen) and _ (underline)   
  * example: 3516-6s4dfsad41 
+ subId – Mandatory parameter for PSP’s (payment service providers), to distinguish multiple websites
  * value must be left empty if nothing else is agreed.  
  * so-called ‘reporting criteria’, offers the possibility to classify transactions  
  * max. length: 8 characters (case sensitive)  
  * agreement with paysafecard needed  
  * example: shop1 
+ amount – payout amount  
  * requested amount is not allowed to exceed 2500.00 EUR (or equivalent in a different transaction currency) in value  
  * max. 11 digits before – exactly 2 digits after the decimal point  
  * use a point as a decimal separator  
  * Valid example: 
    * 100.00
    * 1000.00
  * Invalid example: 
    * 1,000.00 
+ currency – disposition currency   
  * max. length: 3 characters, all uppercase  
  * ISO Currency Code   
  * example: MXN
+ countryCode - ISO 3166-1 alpha-2 country code 
  * example: MX, PE, BR
+ payoutInstrument - always "SAFETYPAY"
+ validationOnly – Validate the payout without transferring the funds 
  * value true: Test payout request for validity
  * value false: Execute payout
+ utcOffset – the difference in hours and minutes from Coordinated Universal Time (UTC)
  * Example: -03:00
+ notificationUrl (OPTIONAL) - An url, where we will send a notification request after the payout has been finalized (either successfully or unsuccessfully)
+ purpose - The purpose of the payout. Can be one of the following: PAYMENT, PAYROLL, INVOICE

+ firstName – (subelement of CustomerDetailsBasic): the first name of the customer
  * max. length: 60 characters
  * example: John
+ middleName – (subelement of CustomerDetailsBasic) (OPTIONAL): the middle name of the customer
  * max. length: 60 characters
  * example: William
+ lastName – (subelement of CustomerDetailsBasic): the last name of the customer customer
  * max. length: 60 characters
  * example: Doe
+ dateOfBirth – (sub-element of CustomerDetailsBasic): the date of birth of the payout customer in YYYY-MM-DD format
  * example: 1979-12-20
+ phoneNumber - (sub-element of CustomerDetailsBasic) (OPTIONAL): the phone number of the payout customer
  * max. length: 20 characters
+ email - (sub-element of CustomerDetailsBasic) (OPTIONAL): valid email adress of the payout customer
  * max. length 255 characters
  * example: john.wdoe@gmail.com

+ bankAccount - contains sub-elements:
    * type - Type of the customer's bank account (example: CLABE)
    * number - Bank account number (max length: 50 characters)
+ idDocument - contains sub-elements:
    * type - Type of customer's ID document (example: RFC)
    * number - Customer's ID document number (max length: 50 characters)
+ resultCode – type of error
  * 0 indicates that no error occurred
  * 1 indicates that there is a problem with the submitted data (e.g., wrong credentials, transaction has expired, etc.)
  * 2 (technical problem) means that the service is temporarily not available
+ errorCode – the error that occurred - “complete list of error codes” at the bottom of this document
  * 0 indicates that no error occurred
  * Any other value indicates an error occurred
+ errorCodeDescription – provides a detailed description of the errorcode NULL in case of no error
  * In case of an error a string value will be returned

### getPayoutState Parameters
 + MID – merchant ID, unique ID of the merchant/currency pair 10 digits long
 + totalpayoutAmount – The total amount of payouts that were executed on this MID within the current billing cycle
  * Double value Example: 50000,00
 + totalPaymentAmount – The total amount of payments that were executed on this MID within the current billing cycle in the currency of the MID
  * Double value Example : 300000,00
 + creditLine – An extra payout credit line provided by paysafecard to support payout in case an MID is out of balance in the currency of the MID
  * Double value Example 5000,00
 + totalpayoutBalance – The total amount that can still be paid out this billing cycle (in MID currency) Double value
  * 10000,00
 + dailypayoutLimit – the maximum amount of money that can be paid out on this MID for the current day (24 hour), in the currency of the MID (only if configured by paysafecard)
  * Double value if configured Example : 0,00
 + dailypayoutAmount – the total amount that has been paid out on this MID today (in MID currency) MID Double value
  * Example : 5000,00
 + dailypayoutBalance – the total amount that still can be paid out on this MID today (in MID currency) MID Double value if the dailypayoutlimit is configured
  * Example : 0,00
    
    

# Group Payout API Calls

Payout API allows you to:
- validate a payout
- capture a pre-validated payout
- retrieve payout limits by currency

## Validating a payout

 + Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:validationOnly>true</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
    <urn:purpose>PAYMENT</urn:purpose>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>true</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

## Capturing a pre validated payout 

 + Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:validationOnly>false</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
    <urn:purpose>PAYMENT</urn:purpose>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>false</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

## Capturing a payout without validation 

 + Request:
```
<urn:payout>
    <urn:username>USER</urn:username>
    <urn:password>PASSWORD</urn:password>
    <urn:ptid>abcd12345678efgh</urn:ptid>
    <urn:amount>1234.56</urn:amount>
    <urn:currency>MXN</urn:currency>
    <urn:validationOnly>false</urn:validationOnly>
    <urn:utcOffset>+09:00</urn:utcOffset>
    <urn:customerDetailsBasic>
        <urn:firstName>John</urn:firstName>
        <urn:lastName>Doe</urn:lastName>
        <urn:dateOfBirth>1999-12-31</urn:dateOfBirth>
        <urn:middleName>William</urn:middleName>
        <urn:phoneNumber>+527729871234</urn:phoneNumber>
        <urn:email>joh.wdoe@customer.com</urn:email>
    </urn:customerDetailsBasic>
    <urn:payoutInstrument>SAFETYPAY</urn:payoutInstrument>
    <urn:countryCode>MX</urn:countryCode>
    <urn:bankAccount>
        <urn:type>CLABE</urn:type>
        <urn:number>012345678910111216</urn:number>
    </urn:bankAccount>
    <urn:idDocument>
        <urn:type>RFC</urn:type>
        <urn:number>XAXX010101000</urn:number>
    </urn:idDocument>
    <urn:notificationUrl>https://www.merchantsite.com/transaction/abcd12345678efgh/notification</urn:notificationUrl>
    <urn:description>description</urn:description>
    <urn:purpose>PAYMENT</urn:purpose>
</urn:payout>
```

 + Response:
```
<ns1:payoutResponse>
    <ns1:PayoutReturn>
        <ns1:ptid>abcd12345678efgh</ns1:ptid>
        <ns1:requestedCurrency>MXN</ns1:requestedCurrency>
        <ns1:requestedAmount>1234.56</ns1:requestedAmount>
        <ns1:validationOnly>false</ns1:validationOnly>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
    </ns1:PayoutReturn>
</ns1:payoutResponse>
```

## Payout notification
The payout notification is used to notify the business partner independently of the result of the payout processing.  In case of technical errors (e.g. socket timeout), or application errors (e.g. HTTP 500 response), the payout notification is resubmitted at a regular interval until one of the following criteria is fulfilled:

+ The payout notification is successfully delivered (i.e. HTTP 200 response from the server).
+ The maximum number of retry attempts has been reached (currently configured at 5 retries).
+ The payout notification will be sent from either of the below IP addresses:

* 3.127.106.50
* 3.126.164.128
* 3.127.123.143
* 176.34.172.250
* 54.228.173.185

```
{
  "timestamp": 1601916702012,
  "eventType": "PAYOUT_STATUS_CHANGE",
  "version": "1",
  "data": {
      "object": "payout",
      "id": "string",
      "payout_instrument": "SAFETYPAY",
      "created": 0,
      "updated": 0,
      "currency": "string",
      "amount": 0,
      "country_code": "string",
      "customer": {
        "id": "string",
        "email": "string",
        "psc_id": "string",
        "date_of_birth": "string",
        "first_name": "string",
        "middle_name": "string",
        "last_name": "string",
        "phone_number": "string"
      },
      "bank_account": {
        "type": "CLABE",
        "number": "string"
      },
      "id_document": {
        "type": "RFC",
        "number": "string"
      },
      "notification_url": "string",
      "description": "string",
      "purpose": "PAYMENT",
      "status": "SUCCESS"
      }
}
```

<a name="retrieve_limits"></a>
## Retrieve limits 

Used to retrieve limits information for a specific `currency`. All associated MID’s limits infromation will be returned.

### getPayoutState

 + Request:

 ```
<urn:getPayoutState>
     <urn:username>USER</urn:username>
     <urn:password>PASSWORD</urn:password>
</urn:getPayoutState>
```

 + Response: 
```
<ns1:getPayoutStateResponse>
    <ns1:getPayoutStateReturn>
        <ns1:resultCode>0</ns1:resultCode>
        <ns1:errorCode>0</ns1:errorCode>
        <ns1:errorCodeDescription></ns1:errorCodeDescription>
        <ns1:payoutState>
            <ns1:mid>9000000008</ns1:mid>
            <ns1:currency>PYG</ns1:currency>
            <ns1:totalPayoutAmount>0.0</ns1:totalPayoutAmount>
            <ns1:totalPaymentAmount>0.0</ns1:totalPaymentAmount>
            <ns1:creditLine>10000.0</ns1:creditLine>
            <ns1:totalPayoutBalance>10000.0</ns1:totalPayoutBalance>
            <ns1:dailyPayoutLimit>10000.0</ns1:dailyPayoutLimit>
            <ns1:dailyPayoutAmount>0.0</ns1:dailyPayoutAmount>
            <ns1:dailyPayoutBalance>10000.0</ns1:dailyPayoutBalance>
        </ns1:payoutState>
        <ns1:payoutState>
            <ns1:mid>9000000007</ns1:mid>
            <ns1:currency>MXN</ns1:currency>
            <ns1:totalPayoutAmount>30.0</ns1:totalPayoutAmount>
            <ns1:totalPaymentAmount>2.2</ns1:totalPaymentAmount>
            <ns1:creditLine>10000.0</ns1:creditLine>
            <ns1:totalPayoutBalance>9972.2</ns1:totalPayoutBalance>
            <ns1:dailyPayoutLimit>10000.0</ns1:dailyPayoutLimit>
            <ns1:dailyPayoutAmount>10.0</ns1:dailyPayoutAmount>
            <ns1:dailyPayoutBalance>9990.0</ns1:dailyPayoutBalance>
        </ns1:payoutState>
    </ns1:getPayoutStateReturn>
</ns1:getPayoutStateResponse>
```

# Group Payout Error Codes

|Code                                    |Number (optional)  |HTTP Status      |Description          |
|---                                     |---                |---              |---                  |
|`Customer balance exceeded`             |3167               |400              |By executing this payout, the customer's account balance would be exceeded. |
|`Top-up limit exceeded`                |3170               |400              |By executing this payout, the customer's account top up limit would be exceeded.|
|`Customer yearly payout limit exceeded`|3194               |400              | The customer already performed payouts leading to his yearly payout limit being reached. No more payouts will be possible for this customer account until the limit resets.|
|`Customer account details do not match`          |3195               |400              |The provided customer details by the business partner do not match with the customer's details of their my paysafecard account. We only allow payouts if details of business partner request and that of the my paysafecard account match.|
|`my paysafecard account not found by provided credentials`               |3162               |400              |We could not find a customer matching the provided customerId.|
|`There is already the maximum number of pay-out merchant clients assigned to this account`|3198               |400              | The MCID does not match with the previously used MCID for that my paysafecard account. We only allow 1:1 relationships for MCID:my paysafecard account. Please refer to this [Section](#MCID2) to find out more.|
|`There is already the maximum number of pay-out accounts assigned to this merchantClient`  |3197               |400              | The my paysafecard account does not match with the previously used my paysafecard account for that MCID. We only allow 1:1 relationships for MCID:my paysafecard account. Please refer to this [Section](#MCID2) to find out more.|
|`payout rejected - account registration not completed`       |3168               |400              |The customer did not complete their registration yet and is not eligible to receive a payout.|
|`Missing mandatory parameter`                     |3150               |400              |Self explanatory - I.E:"Missing mandatory parameter CustomerIdentifier" if the parameter "CustomerIdentfier" is missing in the payout request|
|`Merchant not allowed to perform this action`       |3161               |400              |The merchant account has not been activated for the usage of payouts. Please contact your account manager or the integration team to inquire about the status of payout activation for your account.|
|`Duplicate payout request`              |3164               |400              |Transaction already exists. We only allow unique values for payout requests.|
|`Invalid amount`                        |3165               |400              |Invalid amount.|
|`Merchant limit reached`                |3166               |400              |Merchants payout limit reached. You can inquire the current limits of your account using the [getPayoutState](#retrieve_limits) call. |
|`Payout id collides with existing disposition id`                   |3169               |400              |We do not allow the payout ID to be the same as a previously used payment ID. Please use unique identifiers always.|
|`Payout amount is below minimum payout amount of the merchant`           |3171               |400              |Self explanatory|
|`Customer not active`                     |3193               |400              |The customer's my paysafecard account is not active and therefore not eligible to receive payouts.|
|`Payout blocked due to security reasons`                        |3199               |400              |Self explanatory|

Other errors can be communicated to the customer as “general technical error”. In general when one of these 
errors occur the business partner should contact paysafecard immediately via integration@paysafecard.com if the account is not live.
For live accounts, techsupport@paysafecard.com should be contacted.